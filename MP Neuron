#QUESTION c) In your choice of language(Preferably python/R), Implement a class with the name MPNeuron.
#This class implements an MP Neuron. Implement the following member functions in your class:
#(i) Initialise the constructor with the default number of inputs n = 3 and all inputs being [1,1,1] 
#and the weights being [1,1,1] and threshold as 2.5, (ii) MP_Neuron_Input() - Accepts the number of inputs n,
#list of n inputs and the list of n weights with -1 being inhibitory and +1 being excitatory, 
#and the threshold (theta) also, (iii) MP_Neuron_Evaluate() which outputs the final binary
#output 0 or 1 if the final value computed by the neuron is greater than the threshold.
#Test the MP neuron with 3 inputs and choose an appropriate combination of weights and biases to implement a 3 input NAND gate.



class MPNeuron:
    def __init__(self,n,inputs,weights,threshold ):
        self.n=3 
        self.inputs=[1,1,1]
        self.weights=[1,1,1]
        self.threshold=2.5
        
    def MP_Neuron_Input(self,n,inputs,weights):
        import numpy as np
        self.n=n
        self.inputs=inputs
        self.weights=weights
        weights=np.array(weights)
        inputs=np.array(inputs)
        a=weights*inputs
        a=sum(a)
        return a
    def MP_Neuron_Evaluate(self,data,threshold):
        self.data=data
        self.threshold=threshold
        if data>=threshold:
            return 1
        else:
            return 0
